import { Link } from 'react-router-dom';import styled, { css } from 'styled-components';import { IButtonProps, TNavLink, IButtonAppearances, IButtonDelete } from '../../types';import { COLORS, SPACES, FONTS, TRANSITIONS, SHADOWS } from '../../../../theme';const style = css<IButtonProps>`  display: inline-flex;  align-items: center;  justify-content: center;  width: ${({ width }) => width ?? '100%'};  height: ${({ height }) => height ?? 'initial'};  padding: ${({ pads }) => pads ?? `${SPACES.xs} ${SPACES.l}`};  margin-left: ${({ ml }) => ml ?? '0'};  margin-right: ${({ mr }) => mr ?? '0'};  margin-bottom: ${({ mb }) => mb ?? '0'};  margin-top: ${({ mt }) => mt ?? '0'};  font-weight: ${FONTS.WEIGHTS.semi_bold};  border-radius: ${SPACES.xxxxxl};  box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);  background-color: transparent;  transition: all ${TRANSITIONS.duration.fast} ${TRANSITIONS.function.linear};  cursor: pointer;  &:disabled {    cursor: initial;    background-color: ${COLORS.gray50};  }`;const buttonAppearances: IButtonAppearances = {  primary: `    background-color: ${COLORS.primaryRed};    border: 1px solid ${COLORS.primaryRed};    color: ${COLORS.white};  &:hover,  &:focus {    background-color: ${COLORS.secondaryRed};  }  &:active {    background-color: ${COLORS.lightPink};    border-color: ${COLORS.lightPink};  }  &:disabled {    background-color: ${COLORS.lightWhite};    border-color: ${COLORS.lightWhite};    color: ${COLORS.white};    &:hover {      pointer-events: none;    }  }`,  inverse: `  background-color: ${COLORS.white};  border: 1px solid ${COLORS.semiWhite};  color: ${COLORS.semiTransparentWhite};  &:hover,  &:focus {    background-color:${COLORS.semiWhite};    color: ${COLORS.white};  }  &:active {   background-color:${COLORS.semiWhite};    border-color: ${COLORS.semiWhite} ;    color: ${COLORS.white};  }  &:disabled {    color: ${COLORS.semiWhite};    border-color: ${COLORS.semiWhite};    &:hover {      background-color: inherit;      pointer-events: none;    }  }`};export const StyledButton = styled.button<IButtonProps>`  ${style}  ${({ variant }) => buttonAppearances[variant as keyof typeof buttonAppearances]}`;export const NavLink = styled(Link)<TNavLink>`  text-decoration: none;  color: inherit;  ${style}  ${({ variant }) => buttonAppearances[variant as keyof typeof buttonAppearances]}`;export const Icon = styled.img<IButtonProps>`  width: ${({ widthIcon }) => (widthIcon ? `${widthIcon} !important` : '25px !important')};  margin-right: ${({ marginIcon }) => marginIcon ?? SPACES.xs};  margin-left: ${({ marginIcon }) => marginIcon ?? SPACES.xs};`;export const Button = styled.button<IButtonDelete>`  --background: ${({ background }) => background ?? COLORS.primaryRed};  --background-hover: ${({ backgroundHover }) => backgroundHover ?? COLORS.secondaryRed} ;  --text: ${({ text }) => text ?? COLORS.white};  --shadow: ${({ shadow }) => shadow ?? SHADOWS.xxs};  --paper: ${({ paper }) => paper ?? COLORS.blue};  --paper-lines: ${({ paperLines }) => paperLines ?? COLORS.white};  --trash: ${({ trash }) => trash ?? COLORS.mediumDarkShadeOfCyanBlue};  --trash-lines: ${({ trash }) => trash ?? COLORS.mediumDarkShadeOfCyanBlue};  --check: ${({ check }) => check ?? COLORS.white};  --check-background: ${({ checkBackground }) => checkBackground ?? COLORS.blue};      border: none;  outline: none;  background: none;      padding: ${({ padding }) => padding ?? `${SPACES.xs} ${SPACES.l}`};  margin-left: ${({ ml }) => ml ?? '0'};  margin-right: ${({ mr }) => mr ?? '0'};  margin-bottom: ${({ mb }) => mb ?? '0'};  margin-top: ${({ mt }) => mt ?? '0'};      width: ${({ width }) => width ?? '100%'};  height: ${({ height }) => height ?? 'initial'};  border-radius: ${SPACES.xxxxxl};     -webkit-appearance: none;  -webkit-tap-highlight-color: transparent;    cursor: pointer;  display: inline-flex;  align-items: center;  justify-content: center;    color: var(--text);  background: var(--btn, var(--background));  box-shadow: 0 var(--shadow-y, 4px) var(--shadow-blur, 8px) var(--shadow);  transform: scale(var(--scale, 1));  transition: transform 0.3s, box-shadow 0.3s, background 0.3s;`;